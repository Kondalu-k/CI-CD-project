pipeline {
    agent any
    environment {
        registry = "875472717535.dkr.ecr.ap-south-1.amazonaws.com/vproappfix"
    }
   
    stages {
        stage("CheckOutCode")
    {
        checkout([$class: 'GitSCM', branches: [[name: '*/docker-new']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/sivakethineni/CI-CD-project.git']]])
    }
    stage("Build")
    {
        sh 'mvn install'
    }
   // Building Docker images 
   stage('Build Docker Image'){
     sh 'mkdir -p Docker-app/target'
     sh 'cp target/vprofile-v2.war Docker-app/target/'
     sh 'docker build -t vevadevops/vproappfix:$BUILD_ID Docker-app/'
     sh 'docker tag vevadevops/vproappfix:$BUILD_ID vevadevops/vproappfix:latest'
   }
    
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
         script {
                sh 'aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 875472717535.dkr.ecr.ap-south-1.amazonaws.com'
                sh 'docker push 875472717535.dkr.ecr.us-east-2.amazonaws.com/vproappfix:latest'
         }
        }
      }
   
      
    stage('Docker Run') {
     steps{
         script {
                sh 'docker run -d -p 8096:5000 --rm --name mypythonContainer acct_id.dkr.ecr.us-east-2.amazonaws.com/your_ecr_repo:latest'
            }
      }
      stage('Deploy Docker Container into Docker Dev Server'){
     script {
     def dockerRun = 'docker run -p 8080:8080 -d --name vproapp 875472717535.dkr.ecr.ap-south-1.amazonaws.com/vproappfix:latest'
   sshagent(['30220e43-1726-4c6c-bc5c-2715813b09d7']) {
    
    sh "scp -o StrictHostKeyChecking=no compose/* ubuntu@172.31.9.204:/home/ubuntu"
    sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.9.204 cd /home/ubuntu"
    sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.9.204 ${dockerRun}"
    }
     }
  }   
    }
    }
}
